name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '.changeset/**.md'

permissions:
  contents: write
  pull-requests: write

jobs:
  has-changesets:
    name: Check for Changesets
    runs-on: ubuntu-latest
    outputs:
      has-changesets: ${{ steps.check_changesets.outputs.has_changesets }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for changesets
        id: check_changesets
        run: |
          if [ -n "$(ls .changeset/*.md 2>/dev/null)" ]; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
          fi

  prepare-release-pr:
    name: Prepare Release PR
    runs-on: ubuntu-latest
    needs: has-changesets
    if: needs.has-changesets.outputs.has-changesets == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Git Tag and Push
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Install Knope
        uses: knope-dev/action@v2.1.0

      - name: Execute Knope Versioning
        run: |
          knope version --verbose
          knope version-pr --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: has-changesets
    if: needs.has-changesets.outputs.has-changesets == 'false'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Publish
        run: cargo publish --token "${{ secrets.CARGO_REGISTRY_TOKEN }}"

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          version=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Git Tag and Push
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
